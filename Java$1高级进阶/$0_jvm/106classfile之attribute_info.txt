+-------------------------------------------------------------------------+
|                              属性表集合
+-------------------------------------------------------------------------+

属性表的存在位置?
  (1) ClassFile
  (2) filed_info
  (3) method_info
  (4) Code_attribute

属性表的注意事项?
  (1) 属性名称必须具有唯一性;
  (2) 用户可自定义添加属性到属性表中;
  (3) 各属性表的排序不是严格约束的;
  (4) jvm会自动忽略掉无法识别的属性;

属性表的通用格式
attribute_info{
    u2  attribute_name_index;  // 1)指示常量池中有效的索引;  2)必须是Class_Utf8_info结构;
    u4  attribute_length;  // 指示其后跟随的信息字节的长度(即占用多个字节);
    u1  info[attribute_length];  // 受attribute_length的约束
}

预置属性的三种分类(jvms8)?
    1. 对Java虚拟机正确解读class文件起到关键作用的5个属性:
        (1) ConstantValue
        (2) Code
        (3) StackMapTable
        (4) Exceptions
        (5) BootstrapMethods
    2. 对JavaSE平台的类库正确解读class文件起到关键作用的12个属性;
        (1)   InnerClasses
        (2)   EnclosingMethod
        (3)   Synthetic
        (4)   Signature
        (5)   RuntimeVisibleAnnotations
        (6)   RuntimeInvisibleAnnotations
        (7)   RuntimeVisibleParameterAnnotations
        (8)   RuntimeInvisibleParameterAnnotations
        (9)   RuntimeVisibleTypeAnnotations
        (10)  RuntimeInvisibleTypeAnnotations
        (11)  AnnotationDefault
        (12)  MethodParameters
    3. 对Java虚拟机或JavaSE平台类库能够正确解读class文件虽然不起关键作用,但却可以作为使用工具来使用的6个属性:
        (1) SourceFile
        (2) SourceDebugExtension
        (3) LineNumberTable
        (4) LocalVariableTable
        (5) LocalVariableTypeTable
        (6) Deprecated


+-------------------------------------------------------------------------+
|             预置属性表概览(jvms8/按属性应该出现的位置排序)
+-------------------------------------------------------------------------+

-----------------------------------------------------------------------------------------------------------------
编号 |   属性名                                       |        位置                              |   class文件(版本)
-----------------------------------------------------------------------------------------------------------------
1       SourceFile                                     ClassFile                                      45.3
2       InnerClasses                                   ClassFile                                      45.3
3       EnclosingMethod                                ClassFile                                      49.0
4       SourceDebugExtension                           ClassFile                                      49.0
5       BootstrapMethods                               ClassFile                                      51.0
6       ConstantValue                                  field_info                                     45.3
7       Code                                           method_info                                    45.3
8       Exceptions                                     method_info                                    45.3
9       RuntimmeVisibleParameterAnnotations            method_info                                    49.0
10      \+ RuntimeInvisibleParameterAnnotations        method_info                                    49.0
11      AnnotationDefault                              method_info                                    49.0
12      MethodParameters                               method_info                                    52.0
13      Synthetic                                      ClassFile + field_info + method_info           45.3
14      Deprecated                                     ClassFile + field_info + method_info           45.3
15      Signature                                      ClassFile + field_info + method_info           49.0
16      RuntimeVisibleAnnotations                      ClassFile + field_info + method_info           49.0
17      \+ RuntimeInvisibleAnnotations                 ClassFile + field_info + method_info           49.0
18      LineNumberTable                                Code                                           45.3
19      LocalVariableTable                             Code                                           45.3
20      LocalVariableTypeTable                         Code                                           49.0
21      StackMapTable                                  Code                                           50.0
22      RuntimeVisibleTypeAnnotations                  ClassFile + field_info + method_info           52.0
23      \+ RuntimeInvisibleTypeAnnotations             ClassFile + field_info + method_info           52.0
-----------------------------------------------------------------------------------------------------------------



+-------------------------------------------------------------------------+
|                           SourceFile属性表
+-------------------------------------------------------------------------+
SourceFile_attribute{
    u2  attribute_name_index;  // 1)指示常量池中有效的索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`SourceFile`;
    u4  attribute_length;  // 该项的值必须是2!
    u2  sourcefile_index;  // 1)指示常量池中有效的索引;2)必须是CONSTANT_Utf8_info结构,以表示字符串;
}
注意事项:
    (1) 可选的定长属性;
    (2) 位于ClassFile结构的属性表中;
    (3) 一个ClassFile结构的属性表中最多只能包含一个SourceFile属性;



+-------------------------------------------------------------------------+
|                            InnerClasses属性表
+-------------------------------------------------------------------------+
InnerClasses_attribute{
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`InnerClasses`;
    u4  attribute_length;  // 1)标记当前属性的长度;2)不包括之前的u2和本身的u4,即后续占用的字节长度;
    u2  number_of_classes;  // 指示后续的classes[]数组的数量;
    {  u2  inner_class_info_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Class_info结构;
       u2  outer_class_info_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Class_info结构;3)如果C不是内部类,局部类,匿名类,那么该值为0;
       u2  inner_class_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)若C是匿名类,该值必须是0;
       u2  inner_class_access_flags;  // 内部类的访问标志,类似于ClassFile中的访问标志
    }classes[number_of_classes] // 指示内部类的数组classes[]
}

inner_class_access_flags候选表(计算方式和ClassFile中的access_flags类似)
----------------------------------------------------------------------------------
  标志                |      值        |           含义
----------------------------------------------------------------------------------
  ACC_PUBLIC              0x0001          标志为public修饰符,或者默认就是该修饰符;
  ACC_PROTECTED           0x0002          标志为protected修饰符;
  ACC_PRIVATE             0x0004          标志为private修饰符;
  ACC_STATIC              0x0008          标志为static修饰符,或者默认就是该修饰符;
  ACC_FINAL               0x0010          标志为final修饰符;
  ACC_INTERFACE           0x0200          标志为interface,表示接口
  ACC_ABSTRACT            0x0400          标志为abstract修饰符,或者默认就是该修饰符;
  ACC_SYNTHETIC           0x1000          标志由编译器生成,意味着源文件中没有该类型;
  ACC_ANNOTATION          0x2000          标志annotation,是个注解;
  ACC_ENUM                0x4000          标志enum,是个枚举类;
----------------------------------------------------------------------------------



标记补充C?
  C表示一个类或接口的class格式;

注意事项:
    (1) 可选的变长属性;
    (2) 位于ClassFile结构的属性表中;
    (3) ClassFile结构中只能有0个或1个InnerClasses属性!


+-------------------------------------------------------------------------+
+-------------------------------------------------------------------------+
