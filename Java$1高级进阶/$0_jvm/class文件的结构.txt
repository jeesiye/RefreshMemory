+-------------------------------------------------+
|  class文件的组成部分
+-------------------------------------------------+

组成class文件的基本类型?
(1)class文件=无符号数+表
(2)表=无符号数和可能的表
(3)classfile=unsigned_number+table(unsigned_number[,table])

class文件的10种组成类型:
(1)魔数和版本
(2)常量池
(3)类,父类,接口集合;
(4)字段,方法,属性集合;

class文件的严格分类
classfile{
  u4                  magic;
  u2                  minor_version;
  u2                  major_version;
  u2                  constant_pool_count;
  cp_info             constant_pool[constant_pool_count-1];
  u2                  access_flags;
  u2                  this_class;
  u2                  super_class;
  u2                  interfaces_count;
  u2                  interfaces[interfaces_count];
  u2                  fields_count;
  field_info          fileds[fileds_count];
  u2                  methods_count;
  method_info         methods[methods_count];
  u2                  attributes_count;
  attribute_info      attributes[attributes_count];
}



+-------------------------------------------------+
| 魔数magic
+-------------------------------------------------+
固定形式: 0xCAFFBABE


+-------------------------------------------------+
| 版本minor_version+major_version
+-------------------------------------------------+
u2 minor_version;   表示次版本
u2 major_version;   表示主版本
    (1)次版本的范围是0~65535;
    (2)主版本从45开始(JDK1);
    (3)参考javac指令的`-target`和`-source`指令;


+-------------------------------------------------+
| 常量池constant_pool
+-------------------------------------------------+

常量池的基本类型?
(1)字面量(Literal)和符号引用(Symbolic References);
(2)字面量有:utf8编码,整型,单精度,长整型,双精度,字符串;
(3)符号引用有:类或接口,字段,方法,接口方法,字段或方法的部分;

常量池的计数为什么从1开始?
(1)特定的情况;
(2)某些指向常量池的索引值的数据,不再需要引用常量池的项目;
(3)把这个索引值置位为0来表示;


什么是标志tag?
(1)u1类型的标志位;
(2)指示常量的类型;
(3)JDK7之前有11种常量类型;
(4)JDK7开始新增3种,总计15种常量类型;
(5)在常量池中它们出现的顺序是没有规律的;

15种常量类型
Contant Pool Tag{
  CONTANT_Utf8[1];  // utf8编码的字符串
  CONTANT_Integer[3]; // 整型字面量
  CONTANT_Float[4]; // 单精度字面量
  CONTANT_Long[5];  // 长整型字面量
  CONTANT_Double[6];  // 双精度字面量
  CONTANT_Class[7]; // 类或接口的符号引用
  CONTANT_String[8];  // 字符串字面量
  CONTANT_Filedref[9];  // 字段的符号引用
  CONTANT_Methodref[10];  // 方法的符号引用
  CONTANT_InterfaceMethodref[11]; // 接口方法的符号引用
  CONTANT_NameAndType[12];  // 字段或方法的部分符号引用
  CONTANT_MethodHandle[15]; // 方法句柄
  CONTANT_MethodType[16]; // 方法类型
  CONTANT_InvokeDynamic[18];  // 动态方法调用点
}
