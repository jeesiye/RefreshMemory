+-------------------------------------------------------------------------+
|                              属性表集合
+-------------------------------------------------------------------------+

属性表的存在位置?
  (1) ClassFile
  (2) filed_info
  (3) method_info
  (4) Code_attribute

属性表的注意事项?
  (1) 属性名称必须具有唯一性;
  (2) 用户可自定义添加属性到属性表中;
  (3) 各属性表的排序不是严格约束的;
  (4) jvm会自动忽略掉无法识别的属性;

属性表的通用格式
attribute_info{
    u2  attribute_name_index;  // 1)指示常量池中有效的索引;  2)必须是Class_Utf8_info结构;
    u4  attribute_length;  // 指示其后跟随的信息字节的长度(即占用多个字节);
    u1  info[attribute_length];  // 受attribute_length的约束
}

预置属性的三种分类(jvms8)?
    1. 对Java虚拟机正确解读class文件起到关键作用的5个属性:
        (1) ConstantValue
        (2) Code
        (3) StackMapTable
        (4) Exceptions
        (5) BootstrapMethods
    2. 对JavaSE平台的类库正确解读class文件起到关键作用的12个属性;
        (1)   InnerClasses
        (2)   EnclosingMethod
        (3)   Synthetic
        (4)   Signature
        (5)   RuntimeVisibleAnnotations
        (6)   RuntimeInvisibleAnnotations
        (7)   RuntimeVisibleParameterAnnotations
        (8)   RuntimeInvisibleParameterAnnotations
        (9)   RuntimeVisibleTypeAnnotations
        (10)  RuntimeInvisibleTypeAnnotations
        (11)  AnnotationDefault
        (12)  MethodParameters
    3. 对Java虚拟机或JavaSE平台类库能够正确解读class文件虽然不起关键作用,但却可以作为使用工具来使用的6个属性:
        (1) SourceFile
        (2) SourceDebugExtension
        (3) LineNumberTable
        (4) LocalVariableTable
        (5) LocalVariableTypeTable
        (6) Deprecated


+-------------------------------------------------------------------------+
|             预置属性表概览(jvms8/按属性应该出现的位置排序)
+-------------------------------------------------------------------------+

-----------------------------------------------------------------------------------------------------------------
编号 |   属性名                                       |        位置                              |   class文件(版本)
-----------------------------------------------------------------------------------------------------------------
1       SourceFile                                     ClassFile                                      45.3
2       InnerClasses                                   ClassFile                                      45.3
3       EnclosingMethod                                ClassFile                                      49.0
4       SourceDebugExtension                           ClassFile                                      49.0
5       BootstrapMethods                               ClassFile                                      51.0
6       ConstantValue                                  field_info                                     45.3
7       Code                                           method_info                                    45.3
8       Exceptions                                     method_info                                    45.3
9       RuntimmeVisibleParameterAnnotations            method_info                                    49.0
10      \+ RuntimeInvisibleParameterAnnotations        method_info                                    49.0
11      AnnotationDefault                              method_info                                    49.0
12      MethodParameters                               method_info                                    52.0
13      Synthetic                                      ClassFile + field_info + method_info           45.3
14      Deprecated                                     ClassFile + field_info + method_info           45.3
15      Signature                                      ClassFile + field_info + method_info           49.0
16      RuntimeVisibleAnnotations                      ClassFile + field_info + method_info           49.0
17      \+ RuntimeInvisibleAnnotations                 ClassFile + field_info + method_info           49.0
18      LineNumberTable                                Code                                           45.3
19      LocalVariableTable                             Code                                           45.3
20      LocalVariableTypeTable                         Code                                           49.0
21      StackMapTable                                  Code                                           50.0
22      RuntimeVisibleTypeAnnotations                  ClassFile + field_info + method_info           52.0
23      \+ RuntimeInvisibleTypeAnnotations             ClassFile + field_info + method_info           52.0
-----------------------------------------------------------------------------------------------------------------



+-------------------------------------------------------------------------+
|                         (1) SourceFile属性表
+-------------------------------------------------------------------------+
SourceFile_attribute{
    u2  attribute_name_index;  // 1)指示常量池中有效的索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`SourceFile`;
    u4  attribute_length;  // 该项的值必须是2!
    u2  sourcefile_index;  // 1)指示常量池中有效的索引;2)必须是CONSTANT_Utf8_info结构,以表示字符串;
}
注意事项:
    (1) 可选的定长属性;
    (2) 位于ClassFile结构的属性表中;
    (3) 一个ClassFile结构的属性表中最多只能包含一个SourceFile属性;



+-------------------------------------------------------------------------+
|                         (2) InnerClasses属性表
+-------------------------------------------------------------------------+
InnerClasses_attribute{
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`InnerClasses`;
    u4  attribute_length;  // 1)标记当前属性的长度;2)不包括之前的u2和本身的u4,即后续占用的字节长度;
    u2  number_of_classes;  // 指示后续的classes[]数组的数量;
    {  u2  inner_class_info_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Class_info结构;
       u2  outer_class_info_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Class_info结构;3)如果C不是内部类,局部类,匿名类,那么该值为0;
       u2  inner_class_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)若C是匿名类,该值必须是0;
       u2  inner_class_access_flags;  // 内部类的访问标志,类似于ClassFile中的访问标志
    } classes[number_of_classes] // 指示内部类的数组classes[]
}

inner_class_access_flags候选表(计算方式和ClassFile中的access_flags类似)
----------------------------------------------------------------------------------
  标志                |      值        |           含义
----------------------------------------------------------------------------------
  ACC_PUBLIC              0x0001          标志为public修饰符,或者默认就是该修饰符;
  ACC_PROTECTED           0x0002          标志为protected修饰符;
  ACC_PRIVATE             0x0004          标志为private修饰符;
  ACC_STATIC              0x0008          标志为static修饰符,或者默认就是该修饰符;
  ACC_FINAL               0x0010          标志为final修饰符;
  ACC_INTERFACE           0x0200          标志为interface,表示接口
  ACC_ABSTRACT            0x0400          标志为abstract修饰符,或者默认就是该修饰符;
  ACC_SYNTHETIC           0x1000          标志由编译器生成,意味着源文件中没有该类型;
  ACC_ANNOTATION          0x2000          标志annotation,是个注解;
  ACC_ENUM                0x4000          标志enum,是个枚举类;
----------------------------------------------------------------------------------

标记补充C?
  C表示一个类或接口的class格式;

注意事项:
    (1) 可选的变长属性;
    (2) 位于ClassFile结构的属性表中;
    (3) ClassFile结构中只能有0个或1个InnerClasses属性!



+-------------------------------------------------------------------------+
|                        (3) EnclosingMethod属性表
+-------------------------------------------------------------------------+
EnclosingMethod_attribute{
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)该值必须是`EnclosingMethod`;
    u4  attribute_length;  // 该值必须为4!
    u2  class_index;  // 1)指示当前类中声明的最内层类;2)指示常量池的有效索引;3)必须是CONSTANT_Class_info结构;
    u2  method_index;  // 1)指示常量池中有效的索引;2)必须是CONSTANT_NameAndType_info结构;3)指示由class_index引用类对应的方法名和方法类型;
}

注意事项?
    (1) 可选的定长属性;
    (2) 位于ClassFile结构的属性表中;
    (3) 当且仅当class是局部类或匿名类时,才能具有EnclosingMethod属性;

关于method_index项的特殊情况?
    (1) 考虑源代码中的局部类和匿名类情况,这种情况,当前类的源代码直接处于实例初始化器或静态实例初始化器中;
    (2) 考虑源代码中声明字段赋值匿名类的情况,这种情况,当前类的源代码直接实例变量初始化器或类变量初始化器中;
    (3) 以上两种分类,可概述为:
            若当前类直接包含在某个方法,构造器,表达式中,那么method_index的值必须是0!



+-------------------------------------------------------------------------+
|                    (4) SourceDebugExtension属性表
+-------------------------------------------------------------------------+
SourceDebugExtension_attribute{
    u2  attribute_name_index;  // 1)指示常量池中有效的索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`SourceDebugExtension`;
    u4  attribute_length;  // 2)指示当前属性的长度,不包含之前的u2和本身的u4;
    u2  debug_extension[attribute_length];  // 1)用于保存扩展的调试信息;2)用的是改进版的UTF8的字符串表示;
}

注意事项?
    (1) 可选的变长属性;
    (2) 位于ClassFile结构的属性表中;
    (3) 该属性在ClassFile结构中只能有0个或者1个;



+-------------------------------------------------------------------------+
|                        (5) BootstrapMethods属性表
+-------------------------------------------------------------------------+
BootstrapMethods_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`BootstrapMethods`;
    u4  attribute_length;  // 指示当前属性的长度,不包含之前的u2和本身的u4;
    u2  num_bootstrap_methods;  // 指示bootstrap_methods[]数组的长度;
    {  u2  bootstrap_method_ref;  // 1)指示常量池的有效索引;2)必须是CONSTANT_MethodHandle_info结构;
       u2  num_bootstrap_arguments;  // 指示bootstrap_arguments[]数组的长度;
       u2  bootstrap_arguments[num_bootstrap_arguments];  // 1)指示常量池的有效索引;2)必须是以下常量类型之一(Tag标志):3,4,5,6,7,8,15,16
    } bootstrap_methods[num_bootstrap_methods];  // 1)该数组中的元素,指示了引导方法(方法句柄)和引导序列;2)引导序列中的元素指示了引导方法中的静态参数;
}

注意事项?
    (1) 可选的变长属性;
    (2) 若ClassFile中的常量池有至少一个CONSTANT_InvokeDynamic_info结构,那么ClassFile的属性表集合中有且仅有一个BootstrapMethods属性表;
    (3) 该属性表,用于保存由invokedynamic指令引用的引导方法限定符;

方法句柄?
    (1) 方法句柄的形式,由invokdynamic指令中调用点限定符的持续解析过程来决定.
          java.lang.invoke.MethodHandle#invoke函数在执行的时候,要求引导方法的句柄必须能按照实际传入的参数作出调整,
          就好似通过java.lang.invoke.MethodHandle#asType函数调用一般.
    (2) 而与之对应的CONSTANT_MethodHandle_info的结构中的项也是限制的.
          reference_kind项的值应当是6或者8;
          reference_index项指向的索引应当是静态方法或构造器;
            它接受的参数类型应当依次是如下三种参数:
              a) java.lang.invoke.MethodHandles.Lookup;
              b) java.lang.String;
              c) java.lang.invoke.MethodType;
    (3) 如果不符合上述的要求,那么在调用点限定符的解析过程中,对引导方法句柄的调用就会失败.



+-------------------------------------------------------------------------+
|                        (6) ConstantValue属性表
+-------------------------------------------------------------------------+
ConstantValue_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`ConstantValue`;
    u4  attribute_length;  // 该值固定是2;
    u2  constantvalue_index;  // 1)指示常量池的有效索引;2)常量池中的项必须适应当前字段类型
}

ConstantValue属性的类型(参考表)
---------------------------------------------------------------------------------------------------
  当前常量值的类型                            |             对应常量池中的项的常量类型
---------------------------------------------------------------------------------------------------
  long                                                    CONSTANT_Long
  float                                                   CONSTANT_Float
  double                                                  CONSTANT_Double
  byte,short,int,char,boolean                             CONSTANT_Integer
  String                                                  CONSTANT_String
---------------------------------------------------------------------------------------------------

注意事项?
    (1) 该属性表示一个常量表达式的值;
    (2) 是可选的定长属性;
    (3) 位于filed_info结构的属性表中;
    (4) 若在filed_info结构中表示的非静态字段包含了ConstantValue属性,那么该属性必须要被jvm忽略!

ConstantValue属性表的用法?
    (1) 如果该字段是静态字段,也就是说field_info结构中的access_flags项设置了ACC_STATIC标志;
    (2) 那么field_info结构所表示的字段,其值将是它的项ConstantValue属性所表示的值;
    (3) 这个过程是该字段所在的类或接口初始化阶段的一部分,也就是在类或接口初始化方法之前执行的;



+-------------------------------------------------------------------------+
|                            (7) Code属性表
+-------------------------------------------------------------------------+
Code_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`Code`;
    u4  attribute_length;  // 指示当前属性的长度,不包含之前的u2和本身的u4;
    u2  max_stack;  // 指示当前方法的操作数栈,在方法执行的任何时间点的最大深度;
    u2  max_locals;  // 1)指示当前方法引用的局部变量表中的局部变量个数;2)包含调用此方法时用于传递参数的局部变量;
    u4  code_length;  // 1)指示当前方法的code[]数组的长度;2)该值必须大于0;3)当前方法的code[]数组不能为空;
    u1  code[code_length];  // 指示实现当前方法的jvm代码的实际字节内容;
    u2  exception_table_length;  // 指示exception_table[]数组的长度;
    {  u2  start_pc;  // 指示当前code[]数组中某一指令操作码的有效索引;
       u2  end_pc;  // 1)指示当前code[]数组中的某一指令操作码的有效索引;2)最大索引值是code[]数组的长度;
       u2  handler_pc; // 1)指示当前code[]数组中的某一指令操作码的有效索引;2)表示的是异常处理器的起点;
       u2  catch_type;  // 1)指示常量池中的有效索引;2)必须是CONSTANT_Class_inf结构;3)表示当前异常处理器要捕获的异常类型;
    } exception_table[exception_table_length];  // 1)该数组中的每个元素指示code[]中的一个异常处理器;2)该数组的次序是规范强制的;
    u2  attributes_count;  // 指示attributes[]数组的长度;
    attribute_info  attributes[attributes_count]; // 1)指示属性表集合;2)必须是attribute_info结构;
}

表中项解释的补充?
    1. max_locals项的特殊情况?
        (1) long和double类型的局部变量的最大索引是max_locals-2;
        (2) 其他类型的局部变量的最大索引是max_locals-1;
    2. code[]项?
        当一台可按字节寻址的机制,把code[]数组读入到内存时,若code[]数组的第一个字节是按照4字节边界对齐的;那么
        tableswitch和lookupswitch指令的32位偏移量,也是按照4字节长度对齐的.
    3. start_pc和end_pc项?
        (1) 这两个项指明了异常处理器在code[]数组中的有效范围;
            也就是说当pc寄存器的计数范围在[start_pc,end_pc)时,异常处理器就会生效;
        (2) end_pc项,本身并不在异常处理器的有效范围的!
            这点属于jvm历史上的一个设计缺陷;
            a) 若jvm中某个方法的code属性长度刚好是65535个字节,并且以一个字节长度的指令结束,那么这个指令将不能被异常处理器处理;
            b) 编译器通过限制任何方法,实例初始化方法,静态初始化方法的项code[]数组的长度不能大于65534来解决该bug;
    4. catch_type项?
        (1) 该项的值不能为0;
            a) 如果该项的值为0,那么会导致在所有异常抛出时,都会调用这个异常处理器;
            b) 这种现象可以用于实现finally语句;
    5. attributes[]项?
        (1) attributes[]数组中可包含的属性,可以是任意本文所述的23种属性表;
        (2) attributes[]数组中可包含的属性,也可以是自定义的属性表,即非预置的属性;

注意事项?
    (1) Code属性中包含了某个方法,实例初始化方法,类或接口初始化方法的jvm指令及其相关的辅助信息;
    (2) 可选的变长属性;
    (3) 位于method_info结构的属性表中;
    (4) 若方法声明为native或abstract,那么method_info结构的属性表中,不能有Code属性;
    (5) 若是方法声明为非native或abstract,那么method_info结构的属性表中,有且仅有一个Code属性;



+-------------------------------------------------------------------------+
|                         (8) Exceptions属性表
+-------------------------------------------------------------------------+
Exceptions_attribute {
    u2   attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`Exceptions`;
    u4   attribute_length;  // 指示当前属性的长度,不包含之前的u2和本身的u4;
    u2   number_of_exceptions;  // 指示exception_index_table[]数组的长度;
    u2   exception_index_table[number_of_exceptions];  // 1)指示当前方法要抛出异常的类的类型;2)指示常量池的有效索引;3)必须是CONSTANT_Class_info结构;
}

注意事项?
    (1) 指示一个方法要抛出的受检查型的异常;
    (2) 可选的变长属性;
    (3) 位于method_info结构的属性表中;
    (4) 一个method_info结构的属性表中只能有0个或1个Exceptions属性;

方法抛出异常需要满足的条件?
    条件?
        (1) 抛出的异常是RuntimeException类或其子类的实例;
        (2) 抛出的异常是Error类或其子类的实例;
        (3) 抛出的是在exception_index_table[]数组中声明的异常类或其子类的实例;
    谁来检查该限制?
        jvm不会检查该限制,是由编译器负责强制检查的.



+-------------------------------------------------------------------------+
|         (9) RuntimeVisibleParameterAnnotations属性表
+-------------------------------------------------------------------------+
RuntimeVisibleParameterAnnotations_attribute {
    u2  attribute_name_index;  // 1)指示常量池中的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`RuntimeVisibleParameterAnnotations`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u1  num_parameters;  // 指示parameter_annnotations[]数组的长度;
    {  u2  num_annotations;  // 指示annotations[]数组的长度;
       annotation  annotations[num_annotations];  // 指示标注在parameter_annotation[]数组中某个形式参数上的可见运行时注解;
    } parameter_annotations[num_parameters];  // 该数组的每个元素,都表示一个形式参数的所有运行时可见的注解;
}

表中项解释的补充?
    parameter_annotations[]项?
        1) parameter_annotations[]数组中的第i项,指示的方法描述符中的第i个形式参数;
        2) 说白了,就是方法列表中第i个参数的参数注解;

注意事项?
    (1) 指示当前方法的形式参数上声明的可见运行时注解;
    (2) 是可选的变长属性;
    (3) 位于method_info结构的属性表中;
    (4) 一个method_info结构的属性表中,只能有0个或1个RuntimeVisibleParameterAnnotations属性;


+-------------------------------------------------------------------------+
|           (10) RuntimeInvisibleParameterAnnotations属性表
+-------------------------------------------------------------------------+
RuntimeInvisibleParameterAnnotations_attribute {
    u2  attribute_name_index;  // 1)指示常量池中有效的索引值;2)必须是CONSTANT_Utf8_info结构;3)值必须是`RuntimeInvisibleParameterAnnotations`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u1  num_parameters;  // 指示parameter_annotations[]数组的长度;
    {  u2  num_annotations;  // 指示annotations[]数组的长度;
       annotation  annotations[num_annotations];  // 指示标注在parameter_annotations[]数组中某个形式参数上的不可见运行时注解;
    } parameter_annotations[num_parameters];  // 该数组的每个元素,都表示某个形式参数上的所有不可见运行时注解;
}

注意事项?
    (1) 指示当前方法的形式参数上声明的不可见运行时注解;
    (2) 是可选的变长属性;
    (3) 位于method_info结构的属性表中;
    (4) 一个method_info结构的属性表中,只能有0个或1个RuntimeInvisibleParameterAnnotations属性;

RuntimmeVisibleParameterAnnotations和RuntimeInvisibleParameterAnnotations区别?
    (1) 前者是运行时可见的参数注解,后者是运行时不可见的;
    (2) 主要依据是是否能被反射的API访问;



+-------------------------------------------------------------------------+
|                       (11) AnnotationDefault属性表
+-------------------------------------------------------------------------+
AnnotationDefault_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`AnnotationDefault`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    element_value  default_value;  // 指示外围method_info结构所描述的注解类型元素的默认值;
}

注意事项?
    (1) 指示注解中元素的默认值;
    (2) 可选的变长属性;
    (3) 位于method_info结构(该结构用于表示注解类型中的元素时)中;
    (4) 在method_info结构中,只能有0个或1个AnnotationDefault属性;



+-------------------------------------------------------------------------+
|                     (12) MethodParameters属性表
+-------------------------------------------------------------------------+
MethodParameters_attribute {
    u2  attribute_name_index;  // 1)指示常量池中的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`MethodParameters`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u1  parameters_count;  // 指示parameters[]数组的长度;
    {  u2  name_index;  // 1)指示常量池中的有效索引;2)必须是CONSTANT_Utf8_info结构;3)用以代表某个形式参数(非限定名称);
       u2  access_flags;  // 指示当前这个形式参数的访问标志;
    } parameters[parameters_count];  // 指示当前方法的参数描述符的集合;
}

表中项解释补充?
    1. parameter_count项?
        所表示的个数,指的是当前方法的参数描述符的个数;
    2. name_index项?
        (1) 该项的值是可以为0的;
        (2) 若该项的值是0,表示的是parameters[]数组中的这个元素,描述的是个没有名称的形式参数;
    3. access_flags项?
        (1) ACCESS_FINAL
            指示这个参数是使用final修饰的;
        (2) ACCESS_SYNTHETIC
            指示这个参数没有显式或隐式的声明在方法中,而是由编译器生成的;
        (3) ACCESS_MANDATED
            指示这个参数是隐式的声明在方法中的,Java基础中通常概念的隐式参数this;

注意事项?
    (1) 指示记录形式参数有关的信息,比如方法名称,参数描述符等;
    (2) 可选的变长属性;
    (3) 位于method_info结构的属性表中;
    (4) 一个method_info结构的属性表中,只能有0个或1个MethodParameters属性;



+-------------------------------------------------------------------------+
|                        (13) Synthetic属性表
+-------------------------------------------------------------------------+
Synthetic_attribute {
    u2  attribute_name_index;  // 1)指示常量池中有效的索引值;2)必须是CONSTANT_Utf8_info结构;3)值必须是`Synthetic`;
    u4  attribute_length;  // 该项的值固定是0;
}

历史?
    该属性是在JDK1.1中,为了支持内部类或接口而引入的.

注意事项?
    (1) 指示当前属性所属的外部结构是由编译器自动生成的;
    (2) 可选的定长属性;
    (3) 位于ClassFile,field_info,method_info结构的属性表中;

特殊场景?
    (1) 若一个类成员没有在源文件中出现,则必须带有Syncthetic属性,或者设置ACC_SYNTHETIC访问标志;
    (2) 有唯一例外的情况,就是由编译器自动生成的方法;
          a) Java语言中默认的无参构造器;
          b) 类的初始化函数;
          c) Enum#values和Enum#valueOf函数;



+-------------------------------------------------------------------------+
|                    (14) Deprecated属性表
+-------------------------------------------------------------------------+
Deprecated_attribute {
    u2  attribute_name_index;  // 1)指示常量池中有效的索引值;2)必须是CONSTANT_Utf8_info结构;3)值必须是`Deprecated`;
    u4  attribute_length;  // 该值固定为0;
}

注意事项?
    (1) 指示该属性所属的外围结构是弃用,不支持使用的;
    (2) 是可选的定长属性;
    (3) 位于ClassFile,field_info,method_info结构的属性表中;
    (4) 类,接口,方法,字段中都可以带有Deprecated属性;



+-------------------------------------------------------------------------+
|                          (15) Signature属性表
+-------------------------------------------------------------------------+
Signature_attribute {
    u2  attribute_name_index;  // 1)指示常量池中的有效索引值;2)必须是CONSTANT_Utf8_info结构;3)值必须是`Siguature`;
    u4  attribute_length;  // 该值固定为2;
    u2  signature_index;  // 1)指示常量池中的有效索引;2)必须是CONSTANT_Utf8_info结构;3)指示类签名,方法类型签名,字段类型签名;
}

表中项解释补充?
    signature_index项?
      (1) 该项具体表示何种签名,主要判断当前属性所属的外围结构,是ClassFile,还是field_info,还是method_info;
      (2) Oracel的hotspot的实现,在加载类或链接类的时候,并不检查Signature属性;
          JavaSE的某些类库中能够查询类,接口,构造器,方法,字段的反省签名,而Signature属性的正确性正是由这些类库检查的;
          这些方法有如下几个(非全部):
                  a) java.lang.Class#getGenericSuperclass函数;
                  b) java.lang.reflect.Executable#toGenericString函数;

注意事项:
    (1) 存在泛型机制的前提下,指示类,接口,构造器,方法,字段中类型变量或参数化类型的泛型签名;
    (2) 可选的定长属性;
    (3) 位于ClassFile,field_info,method_info结构的属性表中;



+-------------------------------------------------------------------------+
|               (16) RuntimeVisibleAnnotations属性表
+-------------------------------------------------------------------------+
RuntimeVisibleAnnotations_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`RuntimeVisibleAnnotations`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  num_annotations;  // 指示annotations[]数组的长度;
    annotation  annotations[num_annotations];  // 指示添加在声明上的可见的运行时注解的数组;
}
annotation {
    u2  type_index;  //1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)表示一个字段描述符,也就是注解类型;
    u2  num_element_value_pairs;  // 指示element_value_pairs[]数组的长度,存储元素是注解中的键值对;
    {  u2 element_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)指示键值对中的key,也就是注解中元素的名称值;
       element_value value;  // 指示键值对中的value,也就是注解中元素的名称对应的值;
    } element_value_pairs[num_element_value_pairs];
}
element_value {
    u1  tag;  // 1)指示键值对中value值的类型;2)使用ASCII字符来表示;3)见补充表;
    union  {
        u2  const_value_index;  // 1)指示常量池的有效索引;2)常量类型必须与表中的tag项对应;3)表明该键值对中的value是原始类型或String类型;
        {   u2 type_name_index;  // 2)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)表示一个有效的字段描述符;
            u2 const_name_index;  // 2)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)表示当前element_value结构所表示的枚举类常量的简单名称;
        } enum_const_value;  // 指示键值对中的value是枚举类常量;
        u2  class_info_index;  // 1)指示键值对的value是个类字面量;2)见项的补充;
        annotation  annotation_value;  // 1)指示键值对中的value本身也是个注解;2)那它的内部又是一个annotation项的结构;
        {   u2 num_values;  // 指示当前element_value结构所表示的数组的长度;
            element_value  values[num_values];  // 指示当前element_value结构所表示的数组的元素;
        } array_value;  // 指示键值对中的value是个数组;
    } value;  // value指示键值对中的值,此值是个联合体;
}

补充表?
element_value项中的tag项参考表
-------------------------------------------------------------------------------------
  tag项  |          类型            |  value中联合体中的项        |  常量类型
-------------------------------------------------------------------------------------
  B           byte                    const_value_index          CONSTANT_Integer
  C           char                    const_value_index          CONSTANT_Integer
  D           double                  const_value_index          CONSTANT_Double
  F           float                   const_value_index          CONSTANT_Float
  I           int                     const_value_index          CONSTANT_Integer
  J           long                    const_value_index          CONSTANT_Long
  S           short                   const_value_index          CONSTANT_Integer
  Z           boolean                 const_value_index          CONSTANT_Integer
  s           String                  const_value_index          CONSTANT_Utf8
  e           Enum Type               enum_const_value           Not Applicable
  c           Class                   class_info_index           Not Applicable
  @           Annotation Type         annotation_value           Not Applicable
  [           Array_Type              array_value                Not Applicable
-------------------------------------------------------------------------------------

class_info_index项的补充?
    (1) 指示常量池的有效索引;
    (2) 必须是CONSTANT_Utf8_info结构;
    (3) 用以表示返回描述符;
        返回描述符给出了,与当前element_value结构表示的类字面量相对应的类型;
    (4) 字面量与类型的关系如下:
        a) 如果字面量是C.class,而且C是类或者接口或者数组类型的名字,那么对应的类型就是C;
             常量池中的返回描述符会是ObjectType或者ArrayType.
             比如类的字面量是Object.class,返回类型是Object,返回描述符是Ljava.lang.Object;
        b) 如果字面量是p.class,而且p是原始类型的名字,那么对应的类型就是p;
             常量池中的返回描述符会是BaseType字符(B/S/I/J/F/D/C/Z).
             比如类的字面量是boolean.class,返回类型是boolean,返回描述符是Z;
        c) 如果字面量是void.class,那么对应的返回类型是void;
             常量池中的返回描述符会是V(大写的);
             比如类的字面量是void.class,返回类型是void,返回描述符是V;

注意事项?
    (1) 指示添加在类声明,字段声明,方法声明上可见的运行时注解;
    (2) 可选的变长属性;
    (3) 位于ClassFile,field_info,method_info结构的属性表中;
    (4) 在ClassFile,field_info,method_info结构的属性表中,只能有0个或1个RuntimeVisibleAnnotations属性;



+-------------------------------------------------------------------------+
|                 (17) RuntimeInvisibleAnnotations属性表
+-------------------------------------------------------------------------+
RuntimeInvisibleAnnotations_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`RuntimeInvisibleAnnotations`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  num_annotations;  // 1)指示annotations[]数组的长度;2)表示当前属性中可见的运行时注解的个数;
    annotation  annotations[num_annotations];  // 指示当前属性可见的运行时注解的数组;
}
annotation项的详细解释和结构,参见属性RuntimeVisibleAnnotations中的同等属性;
annotation项中的element_value项的详细解释和结构,参见对应属性RuntimeVisibleAnnotation中的同等属性;

注意事项?
    (1) 表示添加在类声明,字段声明,方法声明上不可见的运行时注解;
    (2) 是可选的变长属性;
    (3) 位于ClassFile,field_info,method_info结构的属性表中;
    (4) ClassFile,field_info,method_info结构的属性表中,只能有0个或1个RuntimeInvisibleAnnotations属性;

RuntimeVisibleAnnotations和RuntimeInvisibleAnnotations属性的区别?
    (1) 一个是运行时可见的是属性,一个是不可见的;
    (2) 可见的运行时属性,是可以被反射API访问的;



+-------------------------------------------------------------------------+
|                       (18) LineNumberTable属性表
+-------------------------------------------------------------------------+
LineNumberTable_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`LineNumberTable`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  line_number_table_length;  // 指示line_number_table[]数组的长度
    {  u2  start_pc;  //1) 指示源文件中的新的行号的起点;2)必须是code[]数组中的有效索引;
       u2  line_number;  // 指示源文件中对应的行号;
    } line_number_table[line_number_table_length];  // 指示源文件的行号会在code[]数组中的哪个指令处发生变化;
}

注意事项?
    (1) 指示源文件对应的行号所表示的内容,对应于jvm中code[]数组中的哪一部分;
    (2) 可选的变长属性;
    (3) 位于Code结构的属性表中;
    (4) Code结构中的属性LineNumberTable可以按照任意的顺序出现;
    (5) Code结构的项attributes表中,可以有不止一个LineNumberTable属性,对应于源文件中的同一行;
        也就是说多个LineNumberTable属性结合起来可以表示源文件中的同一行代码,属性和源文件的代码行之间不必有一一对应的关系;



+-------------------------------------------------------------------------+
|                 (19) LineVariableTable属性表
+-------------------------------------------------------------------------+
LocalVariableTable_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`LocalVariableTable`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  local_variable_table_length;  // 指示local_variable_table[]数组的长度;
    {  u2  start_pc;  // Code[]数组中的起始索引(包含该索引元素);
       u2  length;  // 1) Code[]数组中范围的长度;2)结束索引是start_pc+length(不包含该索引元素);3)即Code[start_pc,start_pc+length);
       u2  name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)表示一个非限定名,指代这个局部变量;
       u2  descriptor_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)表示源文件中局部变量类型的字段描述符;
       u2  index;  // 指示当前栈帧的局部变量表的索引;
    } local_variable_table[local_variable_table_length];
}

表中项的补充?
    1. local_variable_table[]项?
        (1) 以偏移量的形式给出了Code[]数组中的某个范围,当局部变量在这个范围的时候,它是有值的;
        (2) 此项还给出了局部变量在当前帧的局部变量表中的索引;
    2. local_variable_table[]项中的项start_pc和length?
        (1) 指示Code[]数组中的范围,即Code[start_pc,start_pc+length);
        (2) start_pc必须是Code[]数组中的有效索引,且该索引处必须是一条指令的操作码;
        (3) start_pc+length的值,有两种情况:
              a) 若是Code[]数组中的有效索引,其索引处必须是一条指令的操作码;
              b) 也可以是刚超过Code[]数组末尾的首个索引值;
    3. local_variable_table[]项中的项index?
        (1) 若索引处的局部变量是long或double类型,则占用index和index+1两个位置;
        (2) 若是其他类型,则占用index这一个位置;

注意事项?
    (1) 调试器在执行方法的过程中,用该属性可以确定局部变量的值;
    (2) 可选的变长属性;
    (3) 位于Code结构的属性表中;
    (4) Code结构中可以有多个LocalVariableTable属性,且可以按照任意顺序出现;
    (5) Code结构的attributes表的每个局部变量中,最多只能有一个LocalVariableTable属性;



+-------------------------------------------------------------------------+
|                 (20) LocalVariableTypeTable属性表
+-------------------------------------------------------------------------+
LocalVariableTypeTable_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`LocalVariableTypeTable`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  local_variable_type_table_length;  // 指示local_variable_type_table[]数组的长度;
    {  u2  start_pc;  // 参考LocalVariableTable属性的项start_pc所有释义;
       u2  length;  // 参考LocalVariableTable属性的项length所有释义;
       u2  name_index;  // 参考LocalVariableTable属性的项name_index所有释义;
       u2  signature_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)表示源文件中局部变量类型的字段签名;
       u2  index;  // 参考LocalVariableTable属性的项index所有释义;
    } local_variable_type_table[local_variable_type_table_length];  // 参考LocalVariableTable属性的项local_variable_table[]所有释义;
}

注意事项?
    (1) 调试器在执行方法的过程中,用该属性来确定局部变量的值;
    (2) 可选的变长属性;
    (3) 位于Code结构的属性表中;
    (4) Code结构中可以有多个LocalVariableTypeTable属性,且可以按照任意顺序出现;
    (5) Code结构的attributes表的每个局部变量中,最多只能有一个LocalVariableTypeTable属性;

LocalVariableTable和LocalVariableTypeTable属性的区别?
    前者提供的是描述符信息,后者提供的是签名信息;



+-------------------------------------------------------------------------+
|                     (21) StackMapTable属性表
+-------------------------------------------------------------------------+
StackMapTable_attribute {
    u2 attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`StackMapTable`;
    u4 attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2 number_of_entries;
    stack_map_frame entries[number_of_entries];
}


+-------------------------------------------------------------------------+
|              (22) RuntimeVisibleTypeAnnotations属性表
+-------------------------------------------------------------------------+
RuntimeVisibleTypeAnnotations_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`RuntimeVisibleTypeAnnotations`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  num_annotations;
    type_annotation annotations[num_annotations];
}

注意事项?
    (1) 表示标注在类声明,字段声明,方法声明上,所使用到的类型上的,可见的运行时注解;
        以及标注在对应方法体中某个表达式,所使用到的类型上的,可见的运行时注解;
        以及标注在泛型类,泛型接口,泛型方法,泛型构造器的,类型参数上的,可见的运行时注解;
    (2) 只有属性表的上级结构或上级属性中,所对应的声明或表达式加了注解的类型时,该属性表才能包含RuntimeVisibleTypeAnnotations属性;
    (3) 可选的变长属性;
    (4) 位于ClassFile,field_info,method_info,Code结构的属性表中;
    (5) ClassFile,field_info,method_info,Code结构的属性表中,最多只能有1个RuntimeVisibleTypeAnnotations属性;



+-------------------------------------------------------------------------+
|              (23) RuntimeInvisibleTypeAnnotations属性表
+-------------------------------------------------------------------------+
RuntimeInvisibleTypeAnnotations_attribute {
    u2  attribute_name_index;  // 1)指示常量池的有效索引;2)必须是CONSTANT_Utf8_info结构;3)值必须是`RuntimeInvisibleTypeAnnotations`;
    u4  attribute_length;  // 指示当前属性的长度,不包含前面的u2和本身的u4;
    u2  num_annotations;
    type_annotation annotations[num_annotations];
}
