+------------------------------------------------------------------------------+
|  文件信道涉及的类概述
+------------------------------------------------------------------------------+
1. java.nio.channels.FileChannel
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
| A:java.nio.channels.FileChannel(文件信道的抽象)
+------------------------------------------------------------------------------+
-----------------------------------------------------------------------------------------------------------------------------
函数名称      |  释义
-----------------------------------------------------------------------------------------------------------------------------
open            1)根据path实例,获取文件信道对象; 2)重载了2个函数形式;
                \+ a. 可指定path,和文件的打开选项OpenOption;
                \+ b. 可制定path,OpenOption,FileAttribute三个选项;
map             1)创建内存映射文件的实例; 2)需要指定MapMode,pos和创建的长度size;
-----------------------------------------------------------------------------------------------------------------------------
read            1)读取操作; 2)重载了4个函数形式;
write           1)写入操作; 2)重载了4个函数形式;
-----------------------------------------------------------------------------------------------------------------------------
position        1)获取当前的位置pos; 2)修改当前的pos状态;
size            获取当前文件信道的长度;
force           1)强制将文件信道内的更改内容,刷新到关联的存储设备中; 2)接收的是boolean类型的参数;
truncate        把当前的文件信道截断为制定的长度大小;
transferFrom    将ReadableByteChannel中指定的范围,传输到当前的文件信道中;
transferTo      将文件信道中指定的范围,传输到WritableByteChannel中;
-----------------------------------------------------------------------------------------------------------------------------
lock            1)把文件信道中的一定范围,设置为加锁的状态,共享锁或者排他锁的模式;
                2)默认的pos是0,默认的长度是Long.MAX_VALUE,默认是排他锁;
                3)若成功,返回FileLock对象;
tryLock         1)尝试的模式来获取文件信道锁;
                2)默认的配置项,和lock函数是一致的;
                3)若成功,返回FileLock对象;
-----------------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
| L:java.nio.channels.FileChannel$MapMode(常量类)
+------------------------------------------------------------------------------+
-----------------------------------------------------------------------------------------------------------------------------
常量名称                |  释义
-----------------------------------------------------------------------------------------------------------------------------
PRIVATE                   私有映射模式(写时复制);
READ_ONLY                 只读映射模式;
READ_WRITE                读写映射模式;
-----------------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
|  A:java.nio.channels.FileLock(文件信道的锁)
+------------------------------------------------------------------------------+
-----------------------------------------------------------------------------------------------------------------------------
函数名称         |  释义
-----------------------------------------------------------------------------------------------------------------------------
isValid            查询该锁是否是合法的;
release            释放当前的文件信道的锁;
-----------------------------------------------------------------------------------------------------------------------------
acquiredBy
channel
close
overlaps
position
isShared
size
toString
-----------------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
-----------------------------------------------------------------------------------------------------------------------------
