+------------------------------------------------------------------------------+
| L:java.nio.file.Paths(创建工厂)
+------------------------------------------------------------------------------+
1. 该类的主要作用是创建Path实例,类级别是使用final修饰的;
2. 提供了两种途径的创建方式,一种是URI创建,一种是可变路径部件组合创建;
3. 基于unix平台的实现,其实现类是UnixPath;

结构概览:
public final class java.nio.file.Paths {
  private java.nio.file.Paths();
  public static java.nio.file.Path get(java.lang.String, java.lang.String...);
  public static java.nio.file.Path get(java.net.URI);
}



+------------------------------------------------------------------------------+
| I:java.nio.file.Path(路径的抽象)
+------------------------------------------------------------------------------+
1. 部件的概念;
   即表示抽象路径中的一层路径或目录,或者是一个文件名以路径分隔符号为界限;
2. Path公开的函数列表
-----------------------------------------------------------------------------------------------------------------------------
  函数名称                       |  释义
-----------------------------------------------------------------------------------------------------------------------------
  getFileName                      1)获取路径中的最后一个部件; 2)比如a/b/c,获取的就是c;
  getFileSystem                    1)获取创建路径的fs; 2)返回的是FileSystem的引用; 3)当前平台实际是LinuxFileSystem的实例;
  getName                          1)获取指定索引处的路径部件; 2)索引计数从0开始; 3)索引index若是负数,则抛出异常;
  getNameCount                     1)获取路径中部件的总数;
  getParent                        1)获取路径中的父路径; 2)比如a/b/c/d,返回的就是a/b/c;
  getRoot                          1)获取路径中的根路径; 2)返回结果依赖宿主机的fs实现; 3)若是相对路径,则返回null;
-----------------------------------------------------------------------------------------------------------------------------
  startsWith                       1)查看是否是以指定路径path或字符串string开始的; 2)重载了两个函数;
  endsWith                         1)查看是否是以指定路径path或字符串string结尾的; 2)重载了两个函数;
  isAbsolute                       1)查看是否是绝对路径; 2)UnixPath判断的2个条件,一则是路径不能为空,一则是路径的第一个字节char必须为47,即符号/;
  compareTo                        1)比较两个path的大小; 2)UnixPath的实现是遍历比较两个字节数组的大小;
  hashCode                         1)获取哈希码; 2)UnixPath: var1 = 31 * var1 + (this.path[var2] & 255)
  equals                           1)比较两个path是否相等; 2)UnixPath的实现是遍历比较两个字节数组是否相等的;
-----------------------------------------------------------------------------------------------------------------------------
  subpath                          1)截取指定索引范围的路径部件; 2)截取规则是[start,end)的; 3)索引的计数是从0开始的;
  normalize                        1)标准化路径; 2)依赖平台实现和行为规范; 3)UnixPath大致主要处理符号`.`; 4)不推荐使用;
  resolve                          1)拼接子路径; 2)若是绝对路径,则返回该绝对路径; 3)若是相对路径,则返回当前路径+相对路径的拼接结果; 4)重载2个函数;
  resolveSibling                   1)拼接兄弟路径; 2)若是绝对路径,则返回绝对路径; 3)若是相对路径,则返回getParent+相对路径的拼接结果; 4)重载2个函数;
  relativize                       1)获取当前路径相对于指定路径的相对路径; 2)具体查看平台实现和行为规范; 3)不推荐使用;
-----------------------------------------------------------------------------------------------------------------------------
  register                         1)注册一个查看器事件; 2)重载了2个函数; 3)具体规则查看`查看器ws`部分;
-----------------------------------------------------------------------------------------------------------------------------
  toString                         转换为String实例;
  toFile                           转换为java.io.File实例;
  toUri                            1)转换为URI实例; 2)使用FILES方案的; 3)用的是UnixUriUtils工具类;
  toAbsolutePath                   1)转换为绝对路径; 2)默认规则和BIO一致的,相对路径默认从`$user.dir`开始的;
  toRealPath                       1)转换为真实路径; 2)和toAbsolutePath类似,不过会校验路径是否合法有效;
  iterator                         1)转换为迭代器; 2)实际存储的是路径中的每个部件;
-----------------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
|  获取Path实例的方式汇总
+------------------------------------------------------------------------------+
java.nio.file包中的函数列表
    1. Paths#get
    2. Files#toPath
    3. FileSystem#getPath
+------------------------------------------------------------------------------+
