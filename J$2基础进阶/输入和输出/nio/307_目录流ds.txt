+------------------------------------------------------------------------------+
|  I:java.nio.file.DirectoryStream
+------------------------------------------------------------------------------+
1. 该接口只规范一个返回迭代器实例的函数;
2. 获取该接口的实现类实例,通常使用Files#newDirectory函数;


+------------------------------------------------------------------------------+
|  I:java.nio.file.DirectoryStream$Filter
+------------------------------------------------------------------------------+
1. 内置类,添加遍历目录的过滤条件;
2. 该内部接口只规范了一个函数accept,即指示指定自定义的模式;
3. 使用该接口的规范,对应着Files#newDirectoryStream重载的一个函数;

+------------------------------------------------------------------------------+
|  I:java.nio.file.SecureDirectoryStream
+------------------------------------------------------------------------------+
1. 表示一个安全的目录流实例;
2. 通常使用创建工厂获取目录流的实例,是该接口的实现者;
3. I:SecureDirectoryStream函数列表
------------------------------------------------------------------------------------------------------------------
  函数名称                      |  释义
------------------------------------------------------------------------------------------------------------------
  deleteDirectory                 删除指定的目录;
  deleteFile                      删除指定的文件;
  move                            将指定的文件从指定的目录中,移动到指定的目录中;
  getFileAttributeView            获取属性视图,重载了2个函数;
  newDirectoryStream              获取指定路径的新的目录流实例;
  newByteChannel                  指定路径,options,attrs,来获取新的字节管道实例;
------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
|  总结
+------------------------------------------------------------------------------+
1. 目录流的概念,在unix平台中类似ls和dir指令;
      即ls -al  <path>;
      dir -al  <path>;
2. 关于Files#newDirectoryStream重载的3个函数,有三种途径的使用方式;
       1) 不添加过滤条件,直接遍历指定目录路径的所有文件;
       2) 使用glob语法进行过滤遍历指定目录;
       3) 使用DirectoryStream$Filter接口来自定义过滤条件,遍历指定目录;



+------------------------------------------------------------------------------+
|  简单示例
+------------------------------------------------------------------------------+
