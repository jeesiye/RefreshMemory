+------------------------------------------------------------------------------+
|  访问器相关类或接口概述
+------------------------------------------------------------------------------+
1. java.nio.file.FileVisitor<T> : 访问接口规范;
2. java.nio.file.SimpleFileVisitor<T> : 内置的简单实现类使用;
3. java.nio.file.FileVisitResult : 访问器中回调函数执行与否的枚举常量;



+------------------------------------------------------------------------------+
|  java.nio.FileVisitor<T>解析
+------------------------------------------------------------------------------+
1. FileVisitor : 提供了访问目录前后的回调函数,以及访问文件成功与否的回调函数;
2. 开放函数表概述
-------------------------------------------------------------------------------------------------------------------------
  函数名称                      |  释义
-------------------------------------------------------------------------------------------------------------------------
  preVisitDirectory              访问目录之前被调用;
                                 \+ 会根据返回值的枚举类型实例,来确定后续的操作方式,参考java.nio.file.FileVisitorResult枚举类;
                                    以下是候选值:
                                       a) CONTINUE : 继续;
                                       b) TERMINATE : 终止;
                                       c) SKIP_SUBTREE : 跳过该路径的子路径;
                                       d) SKIP_SIBLING : 跳过该路径的兄弟目录;
                                 \+ 注意,这里的目录就是文件夹,而非广义上的文件概念;
                                    1) 当确定即将访问的是一个通常意义上的目录的时候,就会调用一次该方法;
                                    2) 当确定即将访问的是一个文件的时候,不会调用该方法;
                                 \+ 该方法访问的路径深度,以初始参数为准,默认深度是Integer.MAX_VALUE;
                                    1) 所谓的深度是针对路径参数path而言的,可查看unix中的grep指令的深度概念;
                                    2) 比如路径dir1/dir2,深度为2,则会访问到dir1/dir2/dir3/dir4;
  postVisitDirectory             访问目录之后被调用;
                                 \+ 同样是根据返回值的枚举类实例来确定后续的操作,参考FileVisitorResult枚举类;
                                 \+ 和函数preVisitDirectory的区别是:
                                    a) 前者是确定即将加载的路径是目录的时候调用;
                                    b) 后者是确定加载后的路径是目录的时候调用;
  visitFile                      访问文件之后被调用;
                                 \+ 这里所说的文件,是抽象路径的概念,可以是文件也可以是目录;
  visitFileFailed                访问文件失败后被调用;
                                 \+ 这里所说的文件,可以是文本文件也可以是目录;
                                 \+ 触发该条件函数的调用,常见的是访问权限失败的场景;
-------------------------------------------------------------------------------------------------------------------------
3. 比较有代表意义操作的场景?
       1) 使用该接口的场景,通常是涉及到目录树操作的时候;
       2) 当要复制文件到指定目录的时候,应当是pre;(先存在目录,再进行复制)
       3) 当要删除指定目录的时候,应当是post;(先删除文件,再删除目录)



+------------------------------------------------------------------------------+
|  java.nio.file.SimpleFileVisitor解析
+------------------------------------------------------------------------------+
1. 该类是个简单的实现类;
2. 基本上每个方法所做的事情大致一致,合法性校验,CONTINUE继续处理;
3. 若使用nio中的访问器,可简单的实现该类;



+------------------------------------------------------------------------------+
|  访问器的简单实例
+------------------------------------------------------------------------------+
新建目录并新建文件(执行者应当属于root组);
```
FileVisitor<Path> fv = new SimpleFileVisitor<Path>() {
	@Override
	public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
		if (dir.toString().equals("/home"))
			Files.createDirectory(dir.resolve("test"));
		return FileVisitResult.CONTINUE;
	}
	@Override
	public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
		Path path = Files.createFile(Paths.get("/home/test/files.txt"));
		print(path);
		return FileVisitResult.TERMINATE;
	}
};
Path path = Files.walkFileTree(Paths.get("/home"), fv);
```



+------------------------------------------------------------------------------+
|  访问器使用到的地方
+------------------------------------------------------------------------------+
1. java.nio.file.Files.walkFileTree(Path, FileVisitor<? super Path>)
2. java.nio.file.Files.walkFileTree(Path, Set<FileVisitOption>, int, FileVisitor<? super Path>)
