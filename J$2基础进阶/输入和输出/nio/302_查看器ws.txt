查看器中的结构组织
1. I:Watchable  <==>  I:Path
2. I:WatchService  <==>  I:FileSystem
       I:WatchKey
       I:WatchEvent
             I:WatchEvent$Kind
             I:WatchEvent$Modifier
          L:StandardWatchEventKinds



+------------------------------------------------------------------------------+
|  nio中文件系统的查看器扩展功能
+------------------------------------------------------------------------------+
涉及的类或接口主要有如下这些
1. java.nio.file.Watchable : 接口;规范如何注册一个查看器的行为;
                             1) 类库中的实现者,有Path接口的实现,即Path#register函数;
2. java.nio.file.WatchService : 接口;规范一个查看器及其内部提供的行为;
                                1) 如果创建该实例?通过FileSystem#newWatchService函数;
3. java.nio.file.WatchEvent : 结构规范一个查看器的监听事件;
   已知的内部类有2个;
       1) java.nio.file.WatchEvent$Kind : 接口;规范监听事件的种类;
       2) java.nio.file.WatchEvent$Modifier : 结构;规范监听事件的修饰符(当前版本未提供);
   已知通用的实现类只有1个;
       java.nio.file.StandardWatchEventKinds : 提供了基本操作的4种监听事件;
4. java.nio.file.WatchKey : 接口;查看器监听事件的令牌;



+------------------------------------------------------------------------------+
|  I:Watchable的结构
+------------------------------------------------------------------------------+
1. 该接口主要规范如何注册一个查看器事件的行为;
   在目前的类库中,提供实现该规范的具体类有Path接口的实现;
2. Watchable#register函数规范了两个重载的函数;
       a) 参数WatchService指定一个查看器的实例;
       b) 参数WatchEvent$Kind指定一个查看事件的类型,具体使用参见StandardWatchEventKinds;
       c) 参数WatchEvent$Modifier指定一个查看事件的修饰符,在当前版本中未提供实现,若使用需要手动实现;



+------------------------------------------------------------------------------+
|  I:WatchService结构
+------------------------------------------------------------------------------+

1. java.nio.file.WatchService接口规范的函数表
--------------------------------------------------------------------------------------------------------------------
  函数名称         |  释义
--------------------------------------------------------------------------------------------------------------------
  take              获取并删除下一个查看事件key,若未检索到则进入等待状态;
  poll              获取并删除下一个查看事件key(该函数不会等待,若不存在);
                    \+ 提供重载的函数,提供一个指定等待事件的范围;
  close             关闭当前查看事件的服务;
--------------------------------------------------------------------------------------------------------------------

2. java.nio.file.WatchKey
--------------------------------------------------------------------------------------------------------------------
  函数名称           |  释义
--------------------------------------------------------------------------------------------------------------------
  pollEvents          获取并删除当前查看事件key的所有事件,并返回List列表;
  reset               重置当前查看事件的key状态;
  isValid             查看当前查看事件的可以是否是合法的;
  cancel              取消查看器的注册服务;
  watchable           返回注册当前查看器的注册对象;
--------------------------------------------------------------------------------------------------------------------

3. java.nio.file.WatchEvent
--------------------------------------------------------------------------------------------------------------------
  函数名称           |  释义
--------------------------------------------------------------------------------------------------------------------
  kind                指示事件的类型;
  context             指示创建事件的上下文对象;
  count               返回当前事件的计数;
--------------------------------------------------------------------------------------------------------------------

4. java.nio.file.WatchEvent$Kind
--------------------------------------------------------------------------------------------------------------------
  函数名称           |  释义
--------------------------------------------------------------------------------------------------------------------
  name                 返回当前查看事件的名称
  type                 返回当前查看事件上下文的类型,即所谓的context;
--------------------------------------------------------------------------------------------------------------------

5. java.nio.file.WatchEvent#Modifier
--------------------------------------------------------------------------------------------------------------------
  函数名称            |  释义
--------------------------------------------------------------------------------------------------------------------
  name                  返回查看事件修饰符的名称(当前类库中对该功能没有提供内置支持)
--------------------------------------------------------------------------------------------------------------------

6. java.nio.file.StandardWatchEventKinds
--------------------------------------------------------------------------------------------------------------------
  事件名称            |  事件释义
--------------------------------------------------------------------------------------------------------------------
  OVERFLOW              一个特殊的事件,表明事件可能已经丢失或丢弃;
  ENTRY_CREATE          新建事件;
  ENTRY_DELETE          删除事件;
  ENTRY_MODIFY          修改事件;
--------------------------------------------------------------------------------------------------------------------



+------------------------------------------------------------------------------+
|  查看器的简单使用(事件监听)
+------------------------------------------------------------------------------+
1. 其中比较核心的部分可参考WatchKey接口的doc说明;
2. 简单使用的示例(其会一直监听home目录的新建和删除事件);
     ```
     WatchService ws = FileSystems.getDefault().newWatchService();
     Path path = Paths.get("/home");
     path.register(ws, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE);
     for (;;) {
     	WatchKey key = ws.take();
     	List<WatchEvent<?>> events = key.pollEvents();
     	events.forEach(var -> System.out.println(var));
     	if (key.isValid())
     		key.reset();
     	key.cancel();
     }
     ```

+------------------------------------------------------------------------------+
|  总结
+------------------------------------------------------------------------------+
需要理解4个概念:
  1. 注册服务
  2. 查看器
  3. 查看事件
  4. 事件key
