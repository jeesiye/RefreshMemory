+------------------------------------------------------------------------------+
|  字节缓冲区函数概览表
+------------------------------------------------------------------------------+
1. A:java.nio.ByteBuffer
-----------------------------------------------------------------------------------------------------------------------------
  函数名称               |  释义
-----------------------------------------------------------------------------------------------------------------------------
allocate                  1)static函数; 2)创建一个非直接的字节缓冲区; 3)实例是HeapByteBuffer;
allocateDirect            1)static函数; 2)创建一个直接内存的字节缓冲区; 3)实例是DirectByteBuffer;
wrap                      1)static函数; 2)将字节数组包装成字节缓冲区(非直接的); 3)重载了2个函数;
-----------------------------------------------------------------------------------------------------------------------------
slice                     1)切片操作;
                          2)创建一个新的字节缓冲区,其内容是当前共享的子序列
                              \+ 截取的长度是,当前缓冲区的pos位置,到剩余的可用字节;
                              \+ 新的缓冲区pos会重置为0开始计数,cap是之前的cap-之前的pos;
                              \+ 当且仅当之前的缓冲区是只读的,且是直接内存的,新的缓冲区才会是直接内存的;
duplicate                 1)复制操作;
                          2)创建一个新的字节缓冲区,其内容及状态,和目标缓冲区一致;
                              \+ pos,lim,cap等所有的状态都是一致的;
                              \+ 两个缓冲区的操作是相互独立的;
                              \+ 当且仅当目标缓冲区是只读的,且是直接内存的,新的缓冲区才会是直接内存的;
compact                   压缩操作;(具体实现规则查看doc和实现类的处理过程)
asReadOnlyBuffer          1)创建新的字节缓冲区,其内容及状态,和目标缓冲区一致;
                          2)和duplicate函数的区别是,新建的是只读的,其他的特性基本一致;
                               \+ 若目标缓冲区本身就是只读的,那么该函数的效用等价于duplicate函数;
asShortBuffer             转换为ShortBuffer;
asIntBuffer               转换为IntBuffer;
asLongBuffer              转换为LongBuffer;
asFloatBuffer             转换为FloatBuffer;
asDoubleBuffer            转换为Doublebuffer;
asCharBuffer              转换为CharBuffer;
-----------------------------------------------------------------------------------------------------------------------------
get                       1) 获取元素相关的操作方法;
                          2) 重载了4个函数形式;
                                \+ a. 获取下一个元素的内容;
                                \+ b. 获取指定pos的元素的内容;
                                \+ c. 获取批量字节数组的元素的内容;
                                \+ d. 获取指定范围的批量字节数组的元素的内容;
getShort                  1) 以下关于原始类型内容转义获取的方法基本类似,不予赘述;
                          2) 借用的基本都是工具类java.nio.Bits来实现的;
                          3) 每个原始类型的方法都重载了2个函数形式;
                                  a. 一个是获取下一个pos位置的元素;
                                  b. 一个是获取指定pos位置的元素;
getInt
getLong
getFloat
getDouble
getChar
put                       1)存储元素相关的操作方式; 2)重载了4个函数形式; 4)和对应的get类似;
putShort                  1)关于基本类型转换的存储操作; 2)和对应的get类似不予赘述;
putInt
putLong
putFloat
putDouble
putChar
-----------------------------------------------------------------------------------------------------------------------------
hasArray                  查询当前缓冲区是否可转换为可访问的字节数组;
arrayOffset               1)返回转换后字节数组的第一个元素的偏移量; 2)调用该函数之前,应当执行hasArray函数;
array                     将当前缓冲区转换为字节数组;
-----------------------------------------------------------------------------------------------------------------------------
compareTo                 比较操作
order                     返回当前是大端法还是小端法;
isDirect                  查询当前缓冲区是否是直接内存的;
hashCode
equals
toString
-----------------------------------------------------------------------------------------------------------------------------



+-------------------------------------------------------------------------------+
| 其他基于基类型的缓冲区,提供的行为基本类似,或多或少,不予赘述;
+-------------------------------------------------------------------------------+
1. A:java.nio.ShortBuffer
2. A:java.nio.IntBuffer
3. A:java.nio.LongBuffer
4. A:java.nio.FloatBuffer
5. A:java.nio.DoubleBuffer
6. A:java.nio.CharBuffer
