+------------------------------------------------------------------------------+
| 特殊类包含一览
+------------------------------------------------------------------------------+
1. java.nio.ByteOrder : 用于查看当前平台是使用大端法还是小端法存储字节;
2. java.nio.MappedByteBuffer : 使用内存映射的方式操作数据(注意是ByteBuffer的子类);



+------------------------------------------------------------------------------+
| L:java.nio.ByteOrder
+------------------------------------------------------------------------------+
1. 不可变的;
2. 主要用来判断当前平台使用的是大端法还是小端法,来存储字节的;
   主要依赖static函数nativeOrder;
3. 内置了两个常量来标记是否是大端还是小端的方式;
4. 重写了toString函数,来进行输出表示;
5. 使用方式大致如下:
   ```
   ByteOrder order = ByteOrder.nativeOrder();
   print(order.toString());
   ```



+------------------------------------------------------------------------------+
| A:java.nio.MappedByteBuffer
+------------------------------------------------------------------------------+
1. 该类的实例主要是通过FileChannel#map函数来创建的;
2. 该类继承自抽象类ByteBuffer;
3. 以下是行为函数一览表:
-----------------------------------------------------------------------------------------------------------------------------
  函数名称           |  释义
-----------------------------------------------------------------------------------------------------------------------------
force                对缓冲区的任何更改,都强制同步到包含映射文件的存储设备上;
                     \+ 若存储设备不是本地的,则该行为不做任何保证;
                     \+ 若要得到保证,需要满足以下条件;
                           1) 包含映射文件的存储设备是本地的;
                           2) 要采用FileChannel$MapMode.READ_WRITE模式;
                     \+ 同步的是自缓冲区创建以来,或者上次调用该方法时,至今所有的更改;
isLoaded             查询缓冲区的内容,是否驻留在物理内存中;
load                 尽可能的将缓冲区的内容,加载到物理内存中;
-----------------------------------------------------------------------------------------------------------------------------
4. 注意!声明的这三个方法都是final修饰的;
