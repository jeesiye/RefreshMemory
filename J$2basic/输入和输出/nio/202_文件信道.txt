主要类概览
-----------------------------------------------------------------------------------------------------------------------------
A:java.nio.channels.FileChannel              文件信道行为抽象;
E:java.nio.channels.FileChannel$MapMode      map转换内存映射文件时配置项;
A:java.nio.channels.FileLock                 文件信道加锁行为抽象;
-----------------------------------------------------------------------------------------------------------------------------
波及类概览
-----------------------------------------------------------------------------------------------------------------------------
L:java.nio.file.Paths
I:java.nio.file.Path
A:java.nio.MappedByteBuffer                  内存映射文件(属于buffer部分);
-----------------------------------------------------------------------------------------------------------------------------

1. A:java.nio.channels.FileChannel 函数简述
-----------------------------------------------------------------------------------------------------------------------------
open <p2> : FileChannel                    ----|-->创建FileChannel对象;
open <p3> : FileChannel                    ----|
map <p3> : MappedByteBuffer                创建MappedByteBuffer对象;
-----------------------------------------------------------------------------------------------------------------------------
lock <p0> : FileLock                       ----|-->信道加锁;
lock <p3> : FileLock                       ----|
tryLock <p0> : FileLock                    ----|-->尝试加锁;
tryLock <p3> : FileLock                    ----|
-----------------------------------------------------------------------------------------------------------------------------
read <p1> : int                            ----|-->读取
read <p1> : long                               |
read <p2> : int                                |
read <p3> : long 　　　　　　　　　　　　　　　 ----|
write <p1> : int                           ----|-->写入
write <p1> : long                              |
write <p2> : int                               |
write <p3> : long                          ----|
transferFrom <p3> : long                   从ReadableByteBuffer中读取到信道;
transferTo <p3> : long                     从信道中写入到WritableByteBuffer;
-----------------------------------------------------------------------------------------------------------------------------
position <p0> : long                       查询pos值;
position <p1> : FileChannel                修改pos值;
size <p0> : long                           查询信道的长度;
force <p1> : void                          强制刷新(更改同步至存储设备);
truncate <p1> : FileChannel                截断操作;
-----------------------------------------------------------------------------------------------------------------------------

2. E:java.nio.channels.FileChannel$MapMode 枚举实例简述
-----------------------------------------------------------------------------------------------------------------------------
PRIVATE                   私有映射模式(写时复制);
READ_ONLY                 只读映射模式;
READ_WRITE                读写映射模式;
-----------------------------------------------------------------------------------------------------------------------------

3. A:java.nio.channels.FileLock 函数简述
-----------------------------------------------------------------------------------------------------------------------------
acquiredBy <P0> : Channel                  返回创建此锁的信道;
channel <P0> : FileChannel                 返回创建此锁的文件信道;
-----------------------------------------------------------------------------------------------------------------------------
close <P0> : void                          释放锁;---|
release <P0> : void                        释放锁;---|--->等价
-----------------------------------------------------------------------------------------------------------------------------
isShared <P0> : boolean                    是共享锁,还是排他锁;
isValid <P0> : boolean                     是否合法;
position <P0> : long                       查询当前pos值;
size <P0> : long                           查询加锁的长度;
overlaps <P2> : boolean                    查询指定范围是否合法;
toString <P0> : String                     \
-----------------------------------------------------------------------------------------------------------------------------
