+------------------------------------------------------------------------------+
| 什么是BIO,NIO,AIO?
+------------------------------------------------------------------------------+
    1. BIO(java blocking IO),同步阻塞读取IO库,JDK1;
    2. NIO(java non-blocking IO),同步非阻塞读取IO库,JDK4;
    3. AIO(java asynchronized IO),异步非阻塞读取IO库,JDK7;


+------------------------------------------------------------------------------+
|                     基础类库中包的分布状态
+------------------------------------------------------------------------------+
包分布状态表
-----------------------------------------------------------------------------------------------
  包名                        |  含义
-----------------------------------------------------------------------------------------------
  java.io                       包含基础的bio操作的工具及其规范实现;
  java.nio                      包含数据的缓冲容器,原始类型的缓冲容器;
  java.nio.channel              包含IO操作实际使用的通道,可以理解为IO连接器;
  java.nio.channel.spi          对SPI的支持,当扩展选择器,通道器等的时候使用到;
  java.nio.charset              包含字符集,解码器,编码器;
  java.nio.charset.spi          对SPI的支持,当扩展字符集的时候使用到;
  java.nio.file                 包含JVM访问文件的便捷工具类;
  java.nio.file.attribute       对文件和文件系统属性的抽象;
  java.nio.file.spi             对SPI的支持,当扩展新的文件工具,文件系统的时候使用到;
  java.util.stream              便捷的基于NIO和AIO的流工具集合;
-----------------------------------------------------------------------------------------------

+------------------------------------------------------------------------------+
|  nio目录中文件序号的排列
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------
  序号           |   释义
--------------------------------------------------------------------------------
  10x               buffer(缓冲相关)
  20x               channels(信道相关)
  30x               filesystem(文件系统相关)
  40x               charset(字符编码相关)
  50x               attr(文件属性相关)
  60x               utils(流工具相关)
--------------------------------------------------------------------------------




+------------------------------------------------------------------------------+
| 验证的平台?
+------------------------------------------------------------------------------+
    1. 基于unix的oracel-jdk8;
    2. 底层源码参考的是openjdk8;
